import Data_Utils
from sklearn import svm
import numpy as np

from evaluate import get_accuracy, fit_classifier, get_diff
# from evolve import ElitistGA, SteadyStateGA, EstimationGA
from evolve_samples import SteadyStateGA, ElitistGA, EDA
# BEST_MASK = [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0]
BEST_MASK = [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0]
GOAL = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
best_samp_onehot_casis = [1.91080089e+17, -296014175000000.0, 505762803000000.0, -10386124100000.0, 1682728170000000.0, 146571461000000.0, -1616165290000000.0, -591460598000000.0, -1670888760000000.0, -348768483000000.0, 84855968600000.0, 33206653200000.0, 8623787600000000.0, 1.27137963e+16, 2749241100000000.0, -7827820350000000.0, -2203659710000000.0, -1686346100000000.0, 6977527070000000.0, -1230047900000000.0, -60507226700000.0, 609734496000000.0, 1840568560000000.0, 4477835660000000.0, 2524541320000000.0, -872827051000000.0, 915575517000000.0, 4009305220000000.0, 220410761000000.0, 97824059900000.0, -85712514500000.0, -2903498630000000.0, -138861402000000.0, -56884287900000.0, -1.27271047e+16, 1462253730000000.0, 1159199250000000.0, 7438951250000000.0, -2909303510000000.0, 956280466000000.0, -2359198740000000.0, -5687704920000000.0, -1559596220000000.0, -2968750430000000.0, 5045545490000000.0, 5478909980000000.0, 8815297070000000.0, -8542273990000000.0, -4108465490000000.0, -2265512580000000.0, 5583590070000000.0]
best_samp_twohot_casis = [-1.80303421e+17, 221836336000000.0, 4250809610000000.0, 37421187500000.0, 210021040000000.0, 1432561690000.0, 1096891540000000.0, 1513638770000000.0, 270658617000000.0, 1447984800000000.0, -3160479670000.0, 24797601500000.0, 3836947670000000.0, -1635485680000000.0, -4607946680000000.0, -139360552000000.0, -1952427290000000.0, 766299082000000.0, -591674445000000.0, -527089132000000.0, -382311606000000.0, 360886105000000.0, -83601347000000.0, -625310071000000.0, 625339134000000.0, 59446518000000.0, 834775424000000.0, 478647961000000.0, 112836303000000.0, 19334589400000.0, -24868285000000.0, -516449966000000.0, 35423438500000.0, -6004843840000000.0, -2973767970000000.0, -399830689000000.0, 961605523000000.0, -1095741800000000.0, -2653351200000000.0, 3063322320000000.0, -3658830310000000.0, -3476955730000000.0, 6277693490000000.0, 4973880910000000.0, -885797148000000.0, -1168459310000000.0, -805636505000000.0, 359238991000000.0, -3489977310000000.0, 1382563150000000.0, 3592011190000000.0]
best_samp_threehot_casis = [-2.52981903e+18, -329252242000000.0, 832866437000000.0, 326691860000000.0, 1511455500000000.0, 1116652460000000.0, 74797712800000.0, -8593547070000000.0, 2343239560000000.0, -371177939000000.0, 683203077000000.0, -127323334000000.0, 8925588510000.0, -7389575930000000.0, 3.73877994e+16, -4710155860000000.0, 9940903830000000.0, 1447731140000000.0, -1459324450000000.0, -2067604090000000.0, -1.28596101e+16, 1747668450000000.0, 740000385000000.0, -3187931150000000.0, -6019766120000000.0, -8557241810000000.0, 1077494640000000.0, 1.45494806e+16, -1549993780000000.0, -43102567600000.0, 370857248000000.0, -8384743490000000.0, 33051652200000.0, -3.88795698e+16, 3.21766324e+16, 2.08234104e+16, -1.0426388e+16, 4419843140000000.0, 4710691930000000.0, -4551592660000000.0, 6492090810000000.0, -1.52466148e+16, 3531172360000000.0, -1.88940392e+16, 4824575030000000.0, -1.00584406e+16, -1.25055342e+16, 1.60379007e+16, -6828158530000000.0, 1.04569986e+16, -8915942630000000.0]
classifier = svm.LinearSVC()

CU_X, Y = Data_Utils.Get_Casis_CUDataset()
fit_classifier(classifier, CU_X, Y, BEST_MASK)
# a = classifier.decision_function([best_samp_onehot_casis])
# a = a / np.linalg.norm(a)
# for i in a[0]:
#     print(float(i))
ga = EDA(pop_size=100)
for i in range(1):
    ga.evolve(CU_X,BEST_MASK, get_diff, classifier, GOAL, i)
# print(get_accuracy(classifier, CU_X, Y))